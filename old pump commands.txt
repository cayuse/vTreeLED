
            if (strcmp(pCmd,"status") == 0) {
                  sprintf(buffer,"Ok:Ditch:%d Sump:%d PC:%d P:%d NC:%d N:%d SC:%d S:%d ST:%d STen:%d\n",
                    _pPC->ditchCurr,
                    _pPC->sumpCurr,
                    _pPC->vTreeLEDCall,
                    _pPC->isvTreeLEDOn(),
                    _pPC->northCall, _pPC->isNorthOn(),
                    _pPC->southCall, _pPC->isSouthOn(),
                    _pPC->sumpLowTrigger,
                    _pPC->enableSumpTrigger
                    );
                _pHW->print(buffer);

            } else if (strcmp(pCmd,"levels") == 0) {
                  sprintf(buffer,"Ok:%d %d\n",
                    _pPC->ditchCurr,
                    _pPC->sumpCurr
                    );
                _pHW->print(buffer);

            } else if(strcmp(pCmd,"vTreeLED") == 0) {
                int idx = -1;
                if (paramCnt() > 0) {
                    getParam(0,idx);
                    _pPC->setvTreeLED(idx != 0);
                    _pHW->print("Ok\n");
                } else {
                    _pHW->print("Fail:vTreeLED requires a single param: 1 | 0.\n");
                }

            } else if(strcmp(pCmd,"vTreeLED?") == 0) {
                sprintf(buffer,"Ok:%d %d\n",
                    _pPC->vTreeLEDCall,_pPC->isvTreeLEDOn()
                    );
                _pHW->print(buffer);
            } else if(strcmp(pCmd,"north?") == 0) {
                sprintf(buffer,"Ok:%d %d\n",
                    _pPC->northCall, _pPC->isNorthOn()
                    );
                _pHW->print(buffer);
            } else if(strcmp(pCmd,"south?") == 0) {
                sprintf(buffer,"Ok:%d %d\n",
                    _pPC->southCall, _pPC->isSouthOn()
                    );
                _pHW->print(buffer);
            } else if(strcmp(pCmd,"north") == 0) {
                int idx = -1;
                if (paramCnt() > 0) {
                    getParam(0,idx);
                    _pPC->setNorthCall(idx != 0);
                    _pHW->print("Ok\n");
                } else {
                    _pHW->print("Fail:north requires a single param: 1 | 0.\n");
                }
            } else if(strcmp(pCmd,"south") == 0) {
                int idx = -1;
                if (paramCnt() > 0) {
                    getParam(0,idx);
                    _pPC->setSouthCall(idx != 0);
                    _pHW->print("Ok\n");
                } else {
                    _pHW->print("Fail:south requires a single param.: 1 | 0\n");
                }
            } else if(strcmp(pCmd,"sump_trigger") == 0) {
                int lvl = -1;
                if (paramCnt() > 0) {
                    getParam(0,lvl);
                    _pPC->setSumpTrigger(lvl);
                    _pHW->print("Ok\n");
                } else {
                    _pHW->print("Fail:sump_trigger requires a single int value.\n");
                }
            } else if(strcmp(pCmd,"sump_trig_en") == 0) {
                int idx = -1;
                if (paramCnt() > 0) {
                    getParam(0,idx);
                    _pPC->setSumpTriggerEnable(idx != 0);
                    _pHW->print("Ok\n");
                } else {
                    _pHW->print("Fail:sump_trig_en requires a single param.\n");
                }



                    bool isvTreeLEDOn();
                    bool isNorthOn();
                    bool isSouthOn();
                    void setvTreeLED(bool bOn);
                    void setNorthCall(bool bOn);
                    void setNorthValve(bool bOn);
                    void setSouthCall(bool bOn);
                    void setSouthValve(bool bOn);
                    void setSumpTrigger(int trig);
                    void setSumpTriggerEnable(bool bOn);
                    void levelChecks();
                    void updateValves();
                    void readSensors();


                   void vTreeLEDControl::setSumpTrigger(int lvl) {
                       sumpLowTrigger = lvl;
                   }

                   void vTreeLEDControl::setSumpTriggerEnable(bool bOn) {
                       enableSumpTrigger = bOn;
                   }

                   bool vTreeLEDControl::isvTreeLEDOn() {
                     int pin = digitalRead(vTreeLEDControl::vTreeLEDPin);
                     if (pin == LOW) {
                       return true;
                     }
                     return false;
                   }

                   bool vTreeLEDControl::isNorthOn() {
                     int pin = digitalRead(vTreeLEDControl::northPin);
                     if (pin == LOW) {
                       return true;
                     }
                     return false;
                   }

                   bool vTreeLEDControl::isSouthOn() {
                     int pin = digitalRead(vTreeLEDControl::southPin);
                     if (pin == LOW) {
                       return true;
                     }
                     return false;
                   }

                   void vTreeLEDControl::setvTreeLED(bool bOn) {
                     if (bOn) {
                       vTreeLEDCall = true;
                       digitalWrite(vTreeLEDControl::vTreeLEDPin,LOW);
                     } else {
                       vTreeLEDCall = false;
                       digitalWrite(vTreeLEDControl::vTreeLEDPin,HIGH);
                     }
                   }

                   void vTreeLEDControl::setNorthCall(bool bOn) {
                     northCall = bOn;
                   }

                   void vTreeLEDControl::setNorthValve(bool bOn) {
                     if (bOn) {
                       digitalWrite(vTreeLEDControl::northPin,LOW);
                     } else {
                       digitalWrite(vTreeLEDControl::northPin,HIGH);
                     }
                   }

                   void vTreeLEDControl::setSouthCall(bool bOn) {
                     southCall = bOn;
                   }

                   void vTreeLEDControl::setSouthValve(bool bOn) {
                     if (bOn) {
                       digitalWrite(vTreeLEDControl::southPin,LOW);
                     } else {
                       digitalWrite(vTreeLEDControl::southPin,HIGH);
                     }
                   }

                   void vTreeLEDControl::Loop() {
                       levelChecks();
                       updateValves();
                   }

                   void vTreeLEDControl::levelChecks() {
                       if (enableSumpTrigger && sumpCurr < sumpLowTrigger) {
                         setvTreeLED(false);
                       } else {
                         setvTreeLED(vTreeLEDCall);
                       }
                   }

                   /*
                     Called once a second.
                     If the vTreeLED is off, then force both valves off.
                   */
                   void vTreeLEDControl::updateValves() {
                     if (isvTreeLEDOn() ) {
                       setNorthValve(northCall);
                       setSouthValve(southCall);
                     } else {
                       // Always turn valves off if the vTreeLED
                       // is off.
                       setNorthValve(false);
                       setSouthValve(false);
                     }
                   }

                   /*
                     Called often.. reads sensors and applies hardware
                     averaging.
                   */
                   void vTreeLEDControl::readSensors() {
                     int ditch = analogRead(vTreeLEDControl::ditchPin);
                     int sump = analogRead(vTreeLEDControl::sumpPin);

                     ditchSum += ditch;
                     ditchCount++;
                     if (ditchCount >= 1000) {
                       double ditchD = ditchSum;
                       ditchD /= (double)ditchCount;
                       ditchCurr = (int)ditchD;
                       ditchCount = 0;
                       ditchSum = 0;
                     }

                     sumpSum += sump;
                     sumpCount++;
                     if (sumpCount >= 1000) {
                       double sumpD = sumpSum;
                       sumpD /= (double)sumpCount;
                       sumpCurr = (int)sumpD;
                       sumpCount = 0;
                       sumpSum = 0;
                     }

                         pctrl.readSensors();

                     	if ( millis() - oneSecondCounter > oneSecondInterval) {
                     		oneSecondCounter = millis();
                     		// Things to do at a one-second interval.
                     		toggleLed();
                             pctrl.Loop();
                     	}